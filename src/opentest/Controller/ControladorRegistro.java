/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package opentest.Controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import opentest.Model.Persona;
import opentest.Model.RegistroPersona;
import opentest.Model.VideocaptureThread;
import opentest.View.GUIRegistro;
import opentest.View.PanelDatos;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.Videoio;

/**
 *
 * @author richa
 */
public class ControladorRegistro implements ActionListener {
    private PanelDatos panelDatos;
    private GUIRegistro guiRegistro;
    private VideocaptureThread camara;
    private CascadeClassifier cascadeClassifier = new CascadeClassifier("./src/resources/haarCascade/haarcascade_frontalface_alt.xml");
    private VideoCapture camera;
    private Mat frame;
    private Mat grayFrame;
    private RegistroPersona registroPersona;
    private String nombre;
    private String id;
    private Persona persona;
    private Persona personaActual;
 
    public ControladorRegistro() {
        guiRegistro = new GUIRegistro(this);
        panelDatos = guiRegistro.getPanelDatos();
        registroPersona = new RegistroPersona();
    }
    
    public GUIRegistro getGuiRegistro(){
        return guiRegistro;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        switch(e.getActionCommand()){
            case "Agregar":
                nombre = panelDatos.getNombre();
                id = panelDatos.getID();
                if(id.equals("") || nombre.equals("")){
                    guiRegistro.mostrarMensaje("No debe de dejar espacios en blanco");
                    return;
                }
                if(registroPersona.buscarPersona(id) != null){
                    guiRegistro.mostrarMensaje("Ya existe una persona registrada con este ID");
                    guiRegistro.limpiar();
                    return;
                }
                persona = new Persona(id, nombre);
                registroPersona.annadirPersona(persona);
                guiRegistro.mostrarMensaje("Persona registrada");
                guiRegistro.limpiar();
                break;
            case "Buscar":
                id = panelDatos.getID();
                if(id.equals("")){
                    guiRegistro.mostrarMensaje("Espacio ID en blanco");
                    return;
                }
                persona = registroPersona.buscarPersona(id);
                if(persona == null){
                    guiRegistro.mostrarMensaje("Esta persona no se encuentra registrada");
                    guiRegistro.limpiar();
                    return;
                }
                panelDatos.setNombre(persona.getNombre());
                guiRegistro.getPanelBtn().setEstadoBtnEliminar(true);
                break;
            case "Eliminar":
                registroPersona.eliminarPersona(id);
                guiRegistro.mostrarMensaje("Persona eliminada");
                guiRegistro.getPanelBtn().setEstadoBtnEliminar(false);
                guiRegistro.limpiar();
                break;
            case "CargarDatos":
                id = panelDatos.getID();
                if(id.equals("")){
                    guiRegistro.mostrarMensaje("Espacio ID en blanco");
                    return;
                }
                persona = registroPersona.buscarPersona(id);
                if(persona == null){
                    guiRegistro.mostrarMensaje("Esta persona no se encuentra registrada");
                    guiRegistro.limpiar();
                    return;
                }
                panelDatos.setNombre(persona.getNombre());
                personaActual = persona;
                guiRegistro.mostrarMensaje("Datos Cargados");
                break;
            case "Continuar":
                ControllerGUI controlador = new ControllerGUI(personaActual,registroPersona, this);
                guiRegistro.setVisible(false);
                break;
        }
    }

    public static void main (String arg []){
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME); 
        new ControladorRegistro();
    }
    
}
