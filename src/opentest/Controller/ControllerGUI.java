/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package opentest.Controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import opentest.Model.Persona;
import opentest.Model.RegistroPersona;
import opentest.Model.VideocaptureThread;
import opentest.View.GUIPrincipal;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author kevin
 */
public class ControllerGUI implements ActionListener{
    
    private GUIPrincipal guiPrincipal;
    private VideoCapture camera;
    private VideocaptureThread camara;
    private Date fechaActual;
    private SimpleDateFormat formatoFecha;
    private String fechaFormateada;
    private Persona personaActual;
    private RegistroPersona registroPersona;
    private ControladorRegistro controladorRegistro;
    
    public ControllerGUI(Persona personaActual, RegistroPersona registroPersona, ControladorRegistro controlador){
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        guiPrincipal = new GUIPrincipal(this);
        formatoFecha = new SimpleDateFormat("ddMMyyyy_HHmmss");
        this.registroPersona = registroPersona;
        this.personaActual = personaActual;
        controladorRegistro = controlador;
        //hasPersonaRegistroFacial();
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        switch(e.getActionCommand()){
            case"EncenderCamara":
                camara = new VideocaptureThread(guiPrincipal, registroPersona);
                guiPrincipal.getPanelCamera().setVisible(true);
                break;
            case "ApagarCamara":
                camara.apagarCamara();
                System.out.println("APAGANDO");
                guiPrincipal.getPanelCamera().setVisible(false);
                break;
            case "DeteccionRostro":
                camara.activarDeteccionRostro();
                break;
            case "Captura":
                if(camara.isCamaraEncendida()){
                    if(personaActual == null){
                        guiPrincipal.mostrarMensaje("Debe de registrarse para poder tener un registro facial");
                        return;
                    }
                    fechaActual = new Date();
                    fechaFormateada = formatoFecha.format(fechaActual);
                    Imgcodecs.imwrite("./src/resources/img/Imagen"+fechaFormateada+"_.jpg", camara.getImagenMat());
                    Mat imagen = Imgcodecs.imread("./src/resources/img/Imagen"+fechaFormateada+"_.jpg");
                    personaActual.setImagen(imagen);
                    personaActual.setHasRegistroFacial(true);
                    personaActual.setRutaImagen("./src/resources/img/Imagen"+fechaFormateada+"_.jpg");
                    System.out.println("Imagen capturada");
                    guiPrincipal.setEstadoBtn(true);
                    registroPersona.escribirJSON();
                }
            
                break;
            case "Reconocer":  
                camara.activarComparacionRostro();
                break;
            case "Volver":
                guiPrincipal.setVisible(false);
                controladorRegistro.getGuiRegistro().setVisible(true);
                break;
        }
    }
    
    public void hasPersonaRegistroFacial(){
        if(personaActual.hasRegistroFacial()){
            guiPrincipal.setEstadoBtn(true);
        }
        else{
            guiPrincipal.setEstadoBtn(false);
        }
    }
}
