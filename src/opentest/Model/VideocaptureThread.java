/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package opentest.Model;


import java.awt.image.BufferedImage;
import opentest.View.GUIPerfil;

import opentest.View.GUIPrincipal;
import opentest.View.PanelCamera;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.Videoio;

/**
 *
 * @author kevin
 */
public class VideocaptureThread extends Thread{
    private VideoCapture camera;
    private Mat frame;
    private Mat grayFrame;
    private MatOfRect detections;
    private CascadeClassifier cascadeClassifier;
    private GUIPrincipal guiPrincipal;
    private boolean deteccionRostro = false;
    private boolean compararRostro = false;
    private RegistroPersona registroPersona;
    private Persona personaEncontrada;
    private GUIPerfil guiPerfil;
    
    public VideocaptureThread(GUIPrincipal guiPrincipal, RegistroPersona registroPersona){
        cascadeClassifier = new CascadeClassifier("./src/resources/haarCascade/haarcascade_frontalface_alt.xml");
        this.guiPrincipal = guiPrincipal;
        this.registroPersona = registroPersona;
        camera = new VideoCapture(0);
        camera.set(Videoio.CAP_PROP_FRAME_WIDTH, 300);
        camera.set(Videoio.CAP_PROP_FRAME_HEIGHT, 300);
        frame = new Mat();
        grayFrame = new Mat();
        detections = new MatOfRect();
        guiPerfil = new GUIPerfil();
        startThread();
    }
    
    public BufferedImage getImage(){
        if (camera.read(frame)) {
            if(deteccionRostro){
                Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY);
                cascadeClassifier.detectMultiScale(grayFrame, detections);
                for (Rect rect : detections.toArray()) {
                    Imgproc.rectangle(frame, rect.tl(), rect.br(), new Scalar(0, 255, 0), 2);
                }
                if(compararRostro){
                    compararRostro(grayFrame);
                }
            }
            guiPrincipal.updateImage(frame);
        }
        return null;
    }
    
    public boolean isCamaraEncendida(){
        return camera.read(frame);
    }
 
    
    public Mat getImagenMat(){
        Mat frameCaptura = new Mat();
        camera.read(frameCaptura);
        return frameCaptura;
    }
    
    public void startThread(){
         if (camera.read(frame)) {
             start();
         }
    }
    
    public Mat getMatFrame(){
        return frame;
    }
    
    public void apagarCamara(){
        camera.release();
        guiPrincipal.getPanelCamera().setImage(null);
    }
    
    public void activarDeteccionRostro(){
        deteccionRostro = !deteccionRostro;
    }
    
    public void compararRostro(Mat grayFrame){
        Mat resultado = new Mat();
        Mat grayFrameImage = new Mat();
        double umbral = 0.8; 
        for(int index = 0; index < registroPersona.size(); index++){
            Imgproc.cvtColor(registroPersona.getPersona(index).getImagen(), grayFrameImage, Imgproc.COLOR_BGR2GRAY);
            Imgproc.matchTemplate(grayFrame, grayFrameImage, resultado, Imgproc.TM_CCOEFF_NORMED);
            if (Core.minMaxLoc(resultado).maxVal > umbral) {
                System.out.println("Imagen encontrada");
                personaEncontrada = registroPersona.getPersona(index);
                guiPerfil.setVisible(true);
                guiPerfil.getPanelPerfil().setJlBienvenida(personaEncontrada.getNombre());
                guiPerfil.getPanelPerfil().setJlID(personaEncontrada.getId());
                compararRostro = false;
                return;
            }
        }
    }
    
    public void activarComparacionRostro(){
        compararRostro = !compararRostro;
        System.out.println(compararRostro);
    }
    
    @Override
    public void run(){
        while(camera.isOpened()){
            getImage();
        }
    }
}
